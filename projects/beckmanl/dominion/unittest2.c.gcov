        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "dominion.c"
        -:    4:#include <stdio.h>
        -:    5:
        -:    6:void supplyCountTest(struct gameState testGame);
        -:    7:void provinceCountTest(struct gameState testGame);
        -:    8:
function main called 1 returned 100% blocks executed 100%
        1:    9:int main(int argc, char* argv[])
        -:   10:{
        -:   11:    struct gameState testGame;
        -:   12:
        -:   13:    int i;
       26:   14:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   15:    {
       25:   16:        testGame.supplyCount[i] = 1;
        -:   17:    }
        -:   18:
        1:   19:    supplyCountTest(testGame);
call    0 returned 100%
        1:   20:    provinceCountTest(testGame);
call    0 returned 100%
        -:   21:}
        -:   22:
        -:   23:
function supplyCountTest called 1 returned 100% blocks executed 83%
        1:   24:void supplyCountTest(struct gameState testGame)
        -:   25:{
        -:   26:    int i;
       1*:   27:    myAssert(isGameOver(&testGame) == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        -:   28:
        4:   29:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   30:    {
        3:   31:        testGame.supplyCount[i] = 0;
        -:   32:    }
        -:   33:
       1*:   34:    myAssert(isGameOver(&testGame) == 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        1:   35:}
        -:   36:
        -:   37:
function provinceCountTest called 1 returned 100% blocks executed 78%
        1:   38:void provinceCountTest(struct gameState testGame)
        -:   39:{
        -:   40:
        1:   41:    testGame.supplyCount[province] = 100;
       1*:   42:    myAssert(isGameOver(&testGame) == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        -:   43:
        1:   44:    testGame.supplyCount[province] = 0;
       1*:   45:    myAssert(isGameOver(&testGame) == 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        1:   46:}
