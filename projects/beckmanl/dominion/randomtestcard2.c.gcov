        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcard2.c
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * randomtestcard2: randomtestcard2.c 
        -:    9: *      gcc -o randomtestcard2 -g randomtestcard2.c dominion.o rngs.o $(CFLAGS)
        -:   10: */
        -:   11:
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "myAssert.c"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "mine"
        -:   24:#define MAXPLAYERS 4
        -:   25:
        1:   26:int main(int argc, char* argv[]) {
        -:   27:    // seed the random generator
        1:   28:    srand(time(NULL));
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 1000;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:    struct gameState G, testG;
        1:   35:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:            sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:    // initialize a game state and player cards
        1:   39:    initializeGame(numPlayers, k, seed, &G);
        -:   40:
        -:   41:
        1:   42:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   43:
        -:   44:    // ----------- TEST 1: random test --------------
        -:   45:
        1:   46:    printf("TEST 1: random test\n");
        -:   47:
        -:   48:    // copy the game state to a test case
        1:   49:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   50:    
        -:   51:    do {
       10:   52:        choice1 = rand() % (gold + 1 - copper) + gold;
       10:   53:        choice2 = rand() % (treasure_map + 1 - curse) + treasure_map;
       10:   54:    } while(getCost(testG.hand[thisPlayer][choice1]) + 3 > getCost(choice2));
        -:   55:
       1*:   56:    myAssert(getCost(testG.hand[thisPlayer][choice1]) + 3 <= getCost(choice2));
        -:   57:
        1:   58:    cardEffect(mine, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   59:
        1:   60:    printf("%d :: %d\n", testG.hand[ thisPlayer ][ testG.handCount[thisPlayer] ], choice2);
       1*:   61:    myAssert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - 1);
        1:   62:    printf("%d :: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        -:   63:
        -:   64:    // decrease number in supply pile
       1*:   65:    myAssert(testG.supplyCount[choice2] == G.supplyCount[choice2]);
        1:   66:    printf("%d :: %d\n", testG.supplyCount[choice2], G.supplyCount[choice2]);
        -:   67:
        1:   68:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   69:
        1:   70:    return 0;
        -:   71:}
        -:   72:
