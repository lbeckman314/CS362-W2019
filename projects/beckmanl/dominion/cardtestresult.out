####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.58% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.27% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
[1m[32mcardtest3.c:25 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 15
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.24% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int card = village;
        1:   18:    int choice1 = 1;
        1:   19:    int choice2 = 2;
        1:   20:    int choice3 = 3;
        1:   21:    int handPos = 0;
        1:   22:    int bonusVal = 0;
        1:   23:    int *bonus = &bonusVal;
        -:   24:
       1*:   25:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   26:
        -:   27:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   28:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.58% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.27% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
[1m[32mcardtest3.c:25 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 15
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.24% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int card = village;
        1:   18:    int choice1 = 1;
        1:   19:    int choice2 = 2;
        1:   20:    int choice3 = 3;
        1:   21:    int handPos = 0;
        1:   22:    int bonusVal = 0;
        1:   23:    int *bonus = &bonusVal;
        -:   24:
       1*:   25:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   26:
        -:   27:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   28:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.58% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.27% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
[1m[32mcardtest3.c:29 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[31mcardtest3.c:30 TEST FAILED: -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 18
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.24% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:
        1:   21:    int card = village;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0;
        1:   24:    int choice3 = 0;
        1:   25:    int handPos = 0;
        1:   26:    int bonusVal = 0;
        1:   27:    int *bonus = &bonusVal;
        -:   28:
       1*:   29:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
       1*:   30:    myAssert(actions == actionsOld + 2);
        -:   31:
        -:   32:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   33:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.58% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.27% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
[1m[32mcardtest3.c:29 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[31mcardtest3.c:30 TEST FAILED: -> actions == actionsOld + 2
[0m[24mactions: 1, actionsOld: 1
File 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.24% of 608
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:
        1:   21:    int card = village;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0;
        1:   24:    int choice3 = 0;
        1:   25:    int handPos = 0;
        1:   26:    int bonusVal = 0;
        1:   27:    int *bonus = &bonusVal;
        -:   28:
       1*:   29:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
       1*:   30:    myAssert(actions == actionsOld + 2);
        1:   31:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   32:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:29 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[31mcardtest3.c:30 TEST FAILED: -> actions == actionsOld + 2
[0m[24mactions: 1, actionsOld: 1
File 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:
        1:   21:    int card = village;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0;
        1:   24:    int choice3 = 0;
        1:   25:    int handPos = 0;
        1:   26:    int bonusVal = 0;
        1:   27:    int *bonus = &bonusVal;
        -:   28:
       1*:   29:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
       1*:   30:    myAssert(actions == actionsOld + 2);
        1:   31:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   32:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:29 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:32 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mactions: 3, actionsOld: 1
File 'cardtest3.c'
Lines executed:100.00% of 20
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:
        1:   21:    int card = village;
        1:   22:    int choice1 = 0;
        1:   23:    int choice2 = 0;
        1:   24:    int choice3 = 0;
        1:   25:    int handPos = 0;
        1:   26:    int bonusVal = 0;
        1:   27:    int *bonus = &bonusVal;
        -:   28:
       1*:   29:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   30:
        1:   31:    actions = testGame->numActions;
       1*:   32:    myAssert(actions == actionsOld + 2);
        1:   33:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   34:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24m[1m[31mcardtest3.c:36 TEST FAILED: -> hand == handOld - 1
[0m[24mactions: 3, actionsOld: 1
File 'cardtest3.c'
Lines executed:100.00% of 24
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        1:   21:    int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        1:   34:    hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
       1*:   36:    myAssert(hand == handOld - 1);
        1:   37:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   38:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24m[1m[31mcardtest3.c:36 TEST FAILED: -> hand == handOld - 1
[0m[24mactions: 3, actionsOld: 1
hand: 5, handOld: 5
File 'cardtest3.c'
Lines executed:100.00% of 25
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        1:   21:    int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        1:   34:    hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
       1*:   36:    myAssert(hand == handOld - 1);
        1:   37:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        1:   38:    printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   39:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24m[1m[31mcardtest3.c:36 TEST FAILED: -> hand == handOld - 1
[0m[24mactions: 3, actionsOld: 1
hand: 5, handOld: 5
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        1:   21:    int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        1:   34:    hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
       1*:   36:    myAssert(hand == handOld - 1);
        1:   37:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        1:   38:    printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   39:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24m[1m[31mcardtest3.c:36 TEST FAILED: -> hand == handOld - 1
[0m[24mactions: 3, actionsOld: 1
hand: 5, handOld: 5
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        1:   21:    int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        1:   34:    hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
       1*:   36:    myAssert(hand == handOld - 1);
        1:   37:    printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        1:   38:    printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   39:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 22
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        1:   21:    int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        1:   34:    hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 20
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        1:   20:    int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:20 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:23 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:
        -:    8:    // adventurer
        1:    9:    int player = 0;
        1:   10:    int drawntreasure = 0;
        1:   11:    struct gameState *testGame = newGame();
        -:   12:
        1:   13:    testGame->deckCount[player] = 5;
        1:   14:    testGame->handCount[player] = 5;
        -:   15:
        1:   16:    int temphand[testGame->handCount[player]];
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   18:    initializeGame(2, k, 10, testGame);
        -:   19:
       1*:   20:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   21:
        1:   22:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   23:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   24:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   25:}
        -:   26:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24m[1m[32mcardtest4.c:24 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 13
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = 0;
        1:   18:    int choice2 = 0;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        1:   23:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   24:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   25:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   26:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
mine: -1
File 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = 0;
        1:   18:    int choice2 = 0;
        1:   19:    int handPos = 0;
        -:   20:
        1:   21:    printf("mine: %d\n", myMine(player, testGame, choice1, choice2, handPos));
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.74% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = gold;
        1:   18:    int choice2 = curse;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.56% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.21% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.51% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 610
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = copper;
        1:   18:    int choice2 = curse;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.53% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.13% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.41% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
error 3
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:17.13% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = copper;
        1:   18:    int choice2 = curse;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.53% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.13% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.41% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
error 1
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.82% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = gold;
        1:   18:    int choice2 = village;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.53% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.13% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.41% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
error 1
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.82% of 613
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = silver;
        1:   18:    int choice2 = village;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.50% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.07% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.35% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
error 1
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.77% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = silver;
        1:   18:    int choice2 = village;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.50% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.07% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.35% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
error 1
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.77% of 615
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = silver;
        1:   18:    int choice2 = village;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.49% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.32% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
cost: 0
error 1
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:15.91% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = silver;
        1:   18:    int choice2 = village;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.49% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.32% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
choice 1: 0
choice 2: 2
error 3
[1m[31mcardtest4.c:21 TEST FAILED: -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:17.37% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = copper;
        1:   18:    int choice2 = estate;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
####################
Beginning cardtest1
####################
[1m[31mcardtest1.c:16 TEST FAILED: -> testGame->deckCount[player] == 2
[0m[24m[1m[31mcardtest1.c:17 TEST FAILED: -> testGame->handCount[player] == 7
[0m[24m[1m[32mcardtest1.c:20 TEST SUCCESSFULLY COMPLETED -> testGame->deckCount[player] == 0
[0m[24m[1m[32mcardtest1.c:21 TEST SUCCESSFULLY COMPLETED -> testGame->handCount[player] == 8
[0m[24mFile 'cardtest1.c'
Lines executed:100.00% of 12
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:6.49% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:
        -:    8:    // smithy
        1:    9:    int player = 0;
        1:   10:    struct gameState *testGame = newGame();
        1:   11:    int handPos = 0;
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    mySmithy(player, testGame, handPos); 
       1*:   16:    myAssert(testGame->deckCount[player] == 2);
       1*:   17:    myAssert(testGame->handCount[player] == 7);
        -:   18:
        1:   19:    mySmithy(player, testGame, handPos); 
       1*:   20:    myAssert(testGame->deckCount[player] == 0);
       1*:   21:    myAssert(testGame->handCount[player] == 8);
        -:   22:    //printf("deck count: %d\n", testGame->deckCount[player]);
        -:   23:    //printf("hand count: %d\n", testGame->handCount[player]);
        -:   24:}
####################
Beginning cardtest2
####################
z: 0
cardDrawn: 4
drawntreasure: 1
z: 0
cardDrawn: 4
drawntreasure: 2
[1m[32mcardtest2.c:19 TEST SUCCESSFULLY COMPLETED -> myAdventurer(drawntreasure, player, temphand, testGame) == 0
[0m[24m[1m[32mcardtest2.c:22 TEST SUCCESSFULLY COMPLETED -> lastCard == copper || lastCard == silver || lastCard == gold
[0m[24mFile 'cardtest2.c'
Lines executed:100.00% of 13
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:17.05% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        1:    6:{
        -:    7:    // adventurer
        1:    8:    int player = 0;
        1:    9:    int drawntreasure = 0;
        1:   10:    struct gameState *testGame = newGame();
        -:   11:
        1:   12:    testGame->deckCount[player] = 5;
        1:   13:    testGame->handCount[player] = 5;
        -:   14:
        1:   15:    int temphand[testGame->handCount[player]];
        1:   16:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:    initializeGame(2, k, 10, testGame);
        -:   18:
       1*:   19:    myAssert(myAdventurer(drawntreasure, player, temphand, testGame) == 0);
        -:   20:
        1:   21:    int lastCard = testGame->hand[player][testGame->handCount[player]-1];
       1*:   22:    myAssert(lastCard == copper || lastCard == silver || lastCard == gold);
        -:   23:    //printf("card: %d\n", testGame->hand[player][testGame->handCount[player]-1]);
        -:   24:}
        -:   25:
####################
Beginning cardtest3
####################
old actions: 1
new actions: 3
[1m[32mcardtest3.c:31 TEST SUCCESSFULLY COMPLETED -> cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0
[0m[24m[1m[32mcardtest3.c:35 TEST SUCCESSFULLY COMPLETED -> actions == actionsOld + 2
[0m[24mFile 'cardtest3.c'
Lines executed:100.00% of 19
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:19.32% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
####################
Beginning cardtest4
####################
[1m[32mcardtest4.c:21 TEST SUCCESSFULLY COMPLETED -> myMine(player, testGame, choice1, choice2, handPos) == 0
[0m[24mFile 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:21.27% of 616
Creating 'dominion.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // mine
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   15:    initializeGame(2, k, 10, testGame);
        -:   16:
        1:   17:    int choice1 = copper;
        1:   18:    int choice2 = silver;
        1:   19:    int handPos = 0;
        -:   20:
       1*:   21:    myAssert(myMine(player, testGame, choice1, choice2, handPos) == 0);
        -:   22:
        -:   23:}
