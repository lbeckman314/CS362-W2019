        -:    0:Source:randomtestcardadventurer.c
        -:    0:Graph:randomtestcardadventurer.gcno
        -:    0:Data:randomtestcardadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcardadventurer.c
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * randomtestcardadventurer: randomtestcardadventurer.c 
        -:    9: *      gcc -o randomtestcardadventurer -g randomtestcardadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   10: */
        -:   11:
        -:   12:
        -:   13:#include "dominion.c"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "myAssert.c"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:#define MAXPLAYERS 4
        -:   25:#define MINPLAYERS 2
        -:   26:
function main called 1 returned 100% blocks executed 97%
        1:   27:int main(int argc, char* argv[]) {
        -:   28:    // seed the random generator
        1:   29:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   30:    int numPlayersRandom = -5;
        1:   31:    int thisPlayerRandom = -5;
        1:   32:    numPlayersRandom = rand() % (MAXPLAYERS - 1 - MINPLAYERS) + MAXPLAYERS;
call    0 returned 100%
        -:   33:
        -:   34:    //choice1 = rand() % (gold + 1 - copper) + gold;
        1:   35:    thisPlayerRandom = rand() % numPlayersRandom;
call    0 returned 100%
        1:   36:    printf("numPlayers: %d\n", numPlayersRandom);
call    0 returned 100%
        1:   37:    printf("thisPlayer: %d\n", thisPlayerRandom);
call    0 returned 100%
        -:   38:
        1:   39:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   40:    int seed = 1000;
        1:   41:    int thisPlayer = 0;
        -:   42:    struct gameState G, testG;
        1:   43:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   44:            sea_hag, tribute, smithy, council_room};
        -:   45:
        -:   46:    // initialize a game state and player cards
        1:   47:    initializeGame(numPlayersRandom, k, seed, &G);
call    0 returned 100%
        -:   48:    
        -:   49:
        1:   50:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   51:
        -:   52:    // ----------- TEST 1: random test --------------
        -:   53:
        -:   54:    //printf("deck count: %d\n", G->deckCount[thisPlayer]);
        -:   55:    //printf("hand count: %d\n", G->handCount[thisPlayer]);
        -:   56:
        1:   57:    printf("TEST 1: random test\n");
call    0 returned 100%
        -:   58:
        -:   59:    // copy the game state to a test case
        1:   60:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   61:    choice1 = 1;
        1:   62:    testG.supplyCount[gold] = 100;
        -:   63:
        1:   64:    int drawntreasure = 0;
        1:   65:    int cardDrawn = -5;
        -:   66:
        -:   67:    int n;
        6:   68:    for (n = 0; n < testG.handCount[thisPlayer]; n++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   69:        cardDrawn = testG.hand[thisPlayer][n];
        5:   70:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   71:            drawntreasure++;
        -:   72:        }
        -:   73:    }
        -:   74:
        1:   75:    int drawntreasurePre = drawntreasure;
        1:   76:    drawntreasure = 0;
        -:   77:
        1:   78:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   79:
       10:   80:    for (n = 0; n < testG.handCount[thisPlayer]; n++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9:   81:        cardDrawn = testG.hand[thisPlayer][n];
        9:   82:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:   83:            drawntreasure++;
        -:   84:        }
        -:   85:    }
        -:   86:
       1*:   87:    myAssert(drawntreasure == drawntreasurePre + 2);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:   88:
        1:   89:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   90:
        1:   91:    return 0;
        -:   92:}
