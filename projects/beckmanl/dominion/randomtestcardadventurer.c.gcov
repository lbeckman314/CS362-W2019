        -:    0:Source:randomtestcardadventurer.c
        -:    0:Graph:randomtestcardadventurer.gcno
        -:    0:Data:randomtestcardadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcardadventurer.c
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * randomtestcardadventurer: randomtestcardadventurer.c 
        -:    9: *      gcc -o randomtestcardadventurer -g randomtestcardadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   10: */
        -:   11:
        -:   12:
        -:   13:#include "dominion.c"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "myAssert.c"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:#define maxplayers 4
        -:   25:#define minplayers 2
        -:   26:
function main called 1 returned 100% blocks executed 77%
        1:   27:int main(int argc, char* argv[]) {
        -:   28:    // seed the random generator
        1:   29:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   30:    int numplayers = -5;
        1:   31:    int thisplayer = -5;
        1:   32:    numplayers = rand() % (maxplayers - 1 - minplayers) + maxplayers;
call    0 returned 100%
        -:   33:
        1:   34:    thisplayer = rand() % numplayers;
call    0 returned 100%
        1:   35:    printf("numplayers: %d\n", numplayers);
call    0 returned 100%
        1:   36:    printf("thisplayer: %d\n", thisplayer);
call    0 returned 100%
        -:   37:
        1:   38:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   39:    int seed = 1000;
        -:   40:    struct gameState G, testG;
        1:   41:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   42:            sea_hag, tribute, smithy, council_room};
        -:   43:
        -:   44:    // initialize a game state and player cards
        1:   45:    initializeGame(numplayers, k, seed, &G);
call    0 returned 100%
        -:   46:    
        -:   47:
        1:   48:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   49:
        -:   50:    // ----------- TEST 1: random test --------------
        -:   51:
        -:   52:    //printf("deck count: %d\n", G->deckCount[thisPlayer]);
        -:   53:    //printf("hand count: %d\n", G->handCount[thisPlayer]);
        -:   54:
        1:   55:    printf("TEST 1: random test\n");
call    0 returned 100%
        -:   56:
        -:   57:    // copy the game state to a test case
        1:   58:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   59:    choice1 = 1;
        1:   60:    testG.supplyCount[gold] = 100;
        -:   61:
        1:   62:    int drawntreasure = 0;
        1:   63:    int cardDrawn = -5;
        -:   64:
        -:   65:    int n;
       1*:   66:    for (n = 0; n < testG.handCount[thisplayer]; n++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   67:        cardDrawn = testG.hand[thisplayer][n];
    #####:   68:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   69:            drawntreasure++;
        -:   70:        }
        -:   71:    }
        -:   72:
        1:   73:    int drawntreasurePre = drawntreasure;
        1:   74:    drawntreasure = 0;
        -:   75:
        1:   76:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   77:
        2:   78:    for (n = 0; n < testG.handCount[thisplayer]; n++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   79:        cardDrawn = testG.hand[thisplayer][n];
        1:   80:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:   81:            drawntreasure++;
        -:   82:        }
        -:   83:    }
        -:   84:
       1*:   85:    myAssert(drawntreasure == drawntreasurePre + 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   86:
        1:   87:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   88:
        1:   89:    return 0;
        -:   90:}
