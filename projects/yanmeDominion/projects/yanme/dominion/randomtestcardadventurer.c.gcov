        -:    0:Source:randomtestcardadventurer.c
        -:    0:Graph:randomtestcardadventurer.gcno
        -:    0:Data:randomtestcardadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcardadventurer.c
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * randomtestcardadventurer: randomtestcardadventurer.c 
        -:    9: *      gcc -o randomtestcardadventurer -g randomtestcardadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   10: */
        -:   11:
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "myAssert.c"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:#define maxplayers 4
        -:   25:#define minplayers 2
        -:   26:
function main called 1 returned 100% blocks executed 90%
        1:   27:int main(int argc, char* argv[]) {
        -:   28:    // seed the random generator
        1:   29:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   30:    int numplayers = -5;
        1:   31:    int thisplayer = -5;
        1:   32:    numplayers = rand() % (maxplayers - 1 - minplayers) + maxplayers;
call    0 returned 100%
        -:   33:
        1:   34:    thisplayer = rand() % numplayers;
call    0 returned 100%
        1:   35:    thisplayer = 0;
        1:   36:    printf("numplayers: %d\n", numplayers);
call    0 returned 100%
        1:   37:    printf("thisplayer: %d\n", thisplayer);
call    0 returned 100%
        -:   38:
        1:   39:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   40:    int seed = 1000;
        -:   41:    struct gameState G, testG;
        1:   42:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:            sea_hag, tribute, smithy, council_room};
        -:   44:
        -:   45:    // initialize a game state and player cards
        1:   46:    initializeGame(numplayers, k, seed, &G);
call    0 returned 100%
        -:   47:    
        -:   48:
        1:   49:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   50:
        -:   51:    // ----------- TEST 1: random test --------------
        -:   52:
        -:   53:    //printf("deck count: %d\n", G->deckCount[thisplayer]);
        1:   54:    printf("hand count: %d\n", G.handCount[0]);
call    0 returned 100%
        1:   55:    printf("hand count: %d\n", G.handCount[1]);
call    0 returned 100%
        1:   56:    printf("hand count: %d\n", G.handCount[2]);
call    0 returned 100%
        1:   57:    printf("hand count: %d\n", G.handCount[3]);
call    0 returned 100%
        -:   58:
        1:   59:    printf("TEST 1: random test\n");
call    0 returned 100%
        -:   60:
        -:   61:    // copy the game state to a test case
        1:   62:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   63:    choice1 = 1;
        1:   64:    testG.supplyCount[gold] = 100;
        -:   65:
        1:   66:    int drawntreasure = 0;
        1:   67:    int cardDrawn = -5;
        -:   68:
        -:   69:    int n;
        6:   70:    for (n = 0; n < testG.handCount[thisplayer]; n++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   71:        cardDrawn = testG.hand[thisplayer][n];
        5:   72:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   73:            drawntreasure++;
        -:   74:        }
        -:   75:    }
        -:   76:
        1:   77:    int drawntreasurePre = drawntreasure;
        1:   78:    drawntreasure = 0;
        -:   79:
        1:   80:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   81:
        1:   82:    printf("testhand: %d\n", testG.handCount[thisplayer]);
call    0 returned 100%
        8:   83:    for (n = 0; n < testG.handCount[thisplayer]; n++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:   84:        cardDrawn = testG.hand[thisplayer][n];
        7:   85:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:   86:            drawntreasure++;
        -:   87:        }
        -:   88:    }
        -:   89:
        1:   90:    if (drawntreasure > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       1*:   91:        myAssert(drawntreasure == drawntreasurePre + 2);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:   92:    }
        -:   93:    else {
    #####:   94:        myAssert(drawntreasure == drawntreasurePre);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:   95:    }
        1:   96:    printf("%d :: %d\n", drawntreasure, drawntreasurePre);
call    0 returned 100%
        -:   97:
        1:   98:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   99:
        1:  100:    return 0;
        -:  101:}
