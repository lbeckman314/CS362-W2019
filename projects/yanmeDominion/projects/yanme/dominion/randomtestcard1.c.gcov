        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcard1.c
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * randomtestcard1: randomtestcard1.c 
        -:    9: *      gcc -o randomtestcard1 -g randomtestcard1.c dominion.o rngs.o $(CFLAGS)
        -:   10: */
        -:   11:
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "myAssert.c"
        -:   16:#include "rngs.h"
        -:   17:#include <assert.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <time.h>
        -:   22:
        -:   23:#define TESTCARD "smithy"
        -:   24:#define MAXPLAYERS 4
        -:   25:#define MINPLAYERS 2
        -:   26:
function main called 1 returned 100% blocks executed 91%
        1:   27:int main(int argc, char* argv[]) {
        -:   28:    // seed the random generator
        1:   29:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   30:    int numPlayers = -5;
        1:   31:    int thisPlayer = -5;
        1:   32:    numPlayers = rand() % (MAXPLAYERS - 1 - MINPLAYERS) + MAXPLAYERS;
call    0 returned 100%
        1:   33:    thisPlayer = rand() % numPlayers; 
call    0 returned 100%
        1:   34:    printf("numPlayers: %d\n", numPlayers);
call    0 returned 100%
        1:   35:    printf("thisPlayer: %d\n", thisPlayer);
call    0 returned 100%
        -:   36:
        1:   37:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   38:    int seed = 1000;
        -:   39:    struct gameState G, testG;
        1:   40:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   41:            sea_hag, tribute, smithy, council_room};
        -:   42:
        -:   43:    // initialize a game state and player cards
        1:   44:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   45:
        -:   46:
        1:   47:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   48:
        -:   49:    // ----------- TEST 1: random test --------------
        -:   50:
        -:   51:    //printf("deck count: %d\n", G->deckCount[thisPlayer]);
        -:   52:    //printf("hand count: %d\n", G->handCount[thisPlayer]);
        -:   53:
        1:   54:    printf("TEST 1: random test\n");
call    0 returned 100%
        -:   55:
        -:   56:    // copy the game state to a test case
        1:   57:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   58:    choice1 = 1;
        1:   59:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + 2);
call    0 returned 100%
        1:   60:    printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - 3);
call    0 returned 100%
        1:   61:    cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   62:
        1:   63:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + 2);
call    0 returned 100%
        1:   64:    printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - 3);
call    0 returned 100%
       1*:   65:    myAssert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + 2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
       1*:   66:    myAssert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   67:
        1:   68:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   69:
        1:   70:    return 0;
        -:   71:}
