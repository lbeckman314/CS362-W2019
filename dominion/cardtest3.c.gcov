        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "myAssert.h"
        -:    2:#include "dominion.c"
        -:    3:#include <stdio.h>
        -:    4:
function main called 1 returned 100% blocks executed 82%
        1:    5:int main(int argc, char* argv[])
        -:    6:{
        -:    7:    // village
        1:    8:    int player = 0;
        1:    9:    struct gameState *testGame = newGame();
call    0 returned 100%
        -:   10:
        1:   11:    testGame->deckCount[player] = 5;
        1:   12:    testGame->handCount[player] = 5;
        -:   13:
        -:   14:
        1:   15:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:    initializeGame(2, k, 10, testGame);
call    0 returned 100%
        -:   17:
        1:   18:    int actions = testGame->numActions;
        1:   19:    int actionsOld = actions;
        -:   20:    //int hand = testGame->handCount[player];
        -:   21:    //int handOld = hand;
        -:   22:
        1:   23:    int card = village;
        1:   24:    int choice1 = 0;
        1:   25:    int choice2 = 0;
        1:   26:    int choice3 = 0;
        1:   27:    int handPos = 0;
        1:   28:    int bonusVal = 0;
        1:   29:    int *bonus = &bonusVal;
        -:   30:
       1*:   31:    myAssert(cardEffect(card, choice1, choice2, choice3, testGame, handPos, bonus) == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        -:   32:
        1:   33:    actions = testGame->numActions;
        -:   34:    //hand = testGame->handCount[player];
       1*:   35:    myAssert(actions == actionsOld + 2);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:   36:    //myAssert(hand == handOld - 1);
        -:   37:    //myAssert(testGame->handCount[player][handPos] == -1);
        -:   38:    //printf("handPos: %d\n", testGame->handCount[player][handPos]);
        -:   39:    ///printf("actions: %d, actionsOld: %d\n", actions, actionsOld);
        -:   40:    //printf("hand: %d, handOld: %d\n", hand, handOld);
        -:   41:}
